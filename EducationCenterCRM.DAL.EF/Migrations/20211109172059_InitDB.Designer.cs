// <auto-generated />
using System;
using EducationCenterCRM.DAL.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationCenterCRM.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211109172059_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05be0b90-6876-40b4-b685-c0951810cc86"),
                            Description = "Introduction to C#",
                            DurationWeeks = 12,
                            Price = 1250m,
                            Program = "1. Getting Started",
                            Title = "Introduction to C#",
                            TopicId = new Guid("3b0909d8-750d-4b85-a365-0d29a31dc4fc")
                        },
                        new
                        {
                            Id = new Guid("54fd7ff1-efb0-492e-8391-628f8b6d5381"),
                            Description = "Introduction to Java",
                            DurationWeeks = 4,
                            Price = 1550m,
                            Program = "1. Getting Started",
                            Title = "Introduction to Web",
                            TopicId = new Guid("fbfe6346-b695-438d-a6a9-a9b643c883c2")
                        },
                        new
                        {
                            Id = new Guid("c30ec29c-f7b8-40af-acb8-f043d891c84c"),
                            Description = "Web with ASP.NET",
                            DurationWeeks = 16,
                            Price = 1350m,
                            Program = "1. Controllers and MVC 2. WebAPI 3.Angular",
                            Title = "ASP.NET",
                            TopicId = new Guid("3b0909d8-750d-4b85-a365-0d29a31dc4fc")
                        },
                        new
                        {
                            Id = new Guid("c35f894b-ddce-487d-a57f-629d8cf4e020"),
                            Description = "Unity Game Development",
                            DurationWeeks = 16,
                            Price = 1850m,
                            Program = "1. What is Unity",
                            Title = "Unity",
                            TopicId = new Guid("3b0909d8-750d-4b85-a365-0d29a31dc4fc")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b815457-8efb-4cad-a280-74f10e5b6056"),
                            GroupId = new Guid("76da5712-ced5-42c8-af87-3799da6c7120"),
                            LessonDate = new DateTime(2021, 11, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("f012fff8-9118-4497-976f-bcd5539fd5c4"),
                            GroupId = new Guid("76da5712-ced5-42c8-af87-3799da6c7120"),
                            LessonDate = new DateTime(2021, 11, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("2fd5e889-d8ff-49ff-9af8-3fbc7ba8a924"),
                            GroupId = new Guid("76da5712-ced5-42c8-af87-3799da6c7120"),
                            LessonDate = new DateTime(2021, 11, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5d87d93-bf3d-4011-b263-3137b1113cc1"),
                            LessonId = new Guid("0b815457-8efb-4cad-a280-74f10e5b6056"),
                            Score = 8,
                            StudentId = new Guid("d1c63e84-1f25-4a5b-90a9-9328791137ab")
                        },
                        new
                        {
                            Id = new Guid("6a6e9380-87bb-4a69-812c-7f18a81b97dc"),
                            LessonId = new Guid("0b815457-8efb-4cad-a280-74f10e5b6056"),
                            Score = 7,
                            StudentId = new Guid("a167f68a-e93f-41e3-a2fa-ef929e2451e3")
                        },
                        new
                        {
                            Id = new Guid("85955162-9bf8-417c-bbd4-121d468627e3"),
                            LessonId = new Guid("f012fff8-9118-4497-976f-bcd5539fd5c4"),
                            Score = 9,
                            StudentId = new Guid("d1c63e84-1f25-4a5b-90a9-9328791137ab")
                        },
                        new
                        {
                            Id = new Guid("788fbe61-f605-4c4d-a0bc-0364225dab5b"),
                            LessonId = new Guid("f012fff8-9118-4497-976f-bcd5539fd5c4"),
                            Score = 7,
                            StudentId = new Guid("a167f68a-e93f-41e3-a2fa-ef929e2451e3")
                        },
                        new
                        {
                            Id = new Guid("7aaf33c0-4658-4e8f-958d-563a3f98e5c5"),
                            LessonId = new Guid("2fd5e889-d8ff-49ff-9af8-3fbc7ba8a924"),
                            Score = 7,
                            StudentId = new Guid("a167f68a-e93f-41e3-a2fa-ef929e2451e3")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1c63e84-1f25-4a5b-90a9-9328791137ab"),
                            BirthDate = new DateTime(1999, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vasilii_Petrov@gmail.com",
                            FirstName = "Vasilii",
                            Gender = 0,
                            LastName = "Petrov",
                            Phone = "+375(25)8854827",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("76da5712-ced5-42c8-af87-3799da6c7120")
                        },
                        new
                        {
                            Id = new Guid("a167f68a-e93f-41e3-a2fa-ef929e2451e3"),
                            BirthDate = new DateTime(1998, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Petr_Vasiliev@gmail.com",
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Vasiliev",
                            Phone = "+375(25)3507382",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("76da5712-ced5-42c8-af87-3799da6c7120")
                        },
                        new
                        {
                            Id = new Guid("0e198ab3-f384-4ac5-a9ca-4993b70f261b"),
                            BirthDate = new DateTime(1989, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ivan_Bezfamilnyi@gmail.com",
                            FirstName = "Ivan",
                            Gender = 0,
                            LastName = "Bezfamilnyi",
                            Phone = "+375(29)5156824",
                            StartDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("e7056f16-6390-4adb-a4a5-10d5304339da")
                        },
                        new
                        {
                            Id = new Guid("6c8e00d4-837e-4001-b3f7-bc83a72c6f19"),
                            BirthDate = new DateTime(1989, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mariya_Sidorova@gmail.com",
                            FirstName = "Mariya",
                            Gender = 1,
                            LastName = "Sidorova",
                            Phone = "+375(44)6042265",
                            StartDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("e7056f16-6390-4adb-a4a5-10d5304339da")
                        },
                        new
                        {
                            Id = new Guid("b53370f1-0812-493f-bbfa-921bd463fab4"),
                            BirthDate = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vitali_Lukyanov@gmail.com",
                            FirstName = "Vitali",
                            Gender = 0,
                            LastName = "Lukyanov",
                            Phone = "+375(44)7702129",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("679757de-cc11-4ded-a779-834871cd53d6")
                        },
                        new
                        {
                            Id = new Guid("90bb95eb-5dca-4a6f-b412-48fb3ca55e6e"),
                            BirthDate = new DateTime(1995, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Elvira_Zaytseva@gmail.com",
                            FirstName = "Elvira",
                            Gender = 0,
                            LastName = "Zaytseva",
                            Phone = "+375(25)6907295",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("679757de-cc11-4ded-a779-834871cd53d6")
                        },
                        new
                        {
                            Id = new Guid("cb7cfecc-6723-4bad-b406-075e53f03c09"),
                            BirthDate = new DateTime(1991, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Alexander_Ptichkin@gmail.com",
                            FirstName = "Alexander",
                            Gender = 0,
                            LastName = "Ptichkin",
                            Phone = "+375(33)5516967",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("679757de-cc11-4ded-a779-834871cd53d6")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76da5712-ced5-42c8-af87-3799da6c7120"),
                            CourseId = new Guid("c30ec29c-f7b8-40af-acb8-f043d891c84c"),
                            Status = 0,
                            TeacherId = new Guid("f5940738-9686-4c6c-b9f3-0558bc0b6bbd"),
                            Title = "ASP_21-1"
                        },
                        new
                        {
                            Id = new Guid("e7056f16-6390-4adb-a4a5-10d5304339da"),
                            CourseId = new Guid("c30ec29c-f7b8-40af-acb8-f043d891c84c"),
                            Status = 0,
                            TeacherId = new Guid("6da3f02d-924c-4169-8bc1-66451a4aae2a"),
                            Title = "ASP_21-2"
                        },
                        new
                        {
                            Id = new Guid("679757de-cc11-4ded-a779-834871cd53d6"),
                            CourseId = new Guid("54fd7ff1-efb0-492e-8391-628f8b6d5381"),
                            Status = 0,
                            TeacherId = new Guid("d4b05ae3-9fd9-4341-b03d-6799cd45fc2b"),
                            Title = "JS_21-1"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentRequests");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5940738-9686-4c6c-b9f3-0558bc0b6bbd"),
                            Bio = "Some information",
                            BirthDate = new DateTime(1986, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Petr_Reshetnikov@gmail.com",
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Reshetnikov",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(44)2668937"
                        },
                        new
                        {
                            Id = new Guid("6da3f02d-924c-4169-8bc1-66451a4aae2a"),
                            Bio = "Some other information",
                            BirthDate = new DateTime(1989, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mikhail_Andreev@gmail.com",
                            FirstName = "Mikhail",
                            Gender = 0,
                            LastName = "Andreev",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(25)6386110"
                        },
                        new
                        {
                            Id = new Guid("d4b05ae3-9fd9-4341-b03d-6799cd45fc2b"),
                            Bio = "Some other information",
                            BirthDate = new DateTime(1989, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Natalia_Usovich@gmail.com",
                            FirstName = "Natalia",
                            Gender = 1,
                            LastName = "Usovich",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(44)8920286"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId1");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b0909d8-750d-4b85-a365-0d29a31dc4fc"),
                            Description = ".Net (ASP.NET, Unity)",
                            Title = ".Net"
                        },
                        new
                        {
                            Id = new Guid("fbfe6346-b695-438d-a6a9-a9b643c883c2"),
                            Description = "JS, HTML, CSS",
                            Title = "Frontend"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c7896643-22ee-40f2-b741-199b98f0e8c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1caf804d-f622-486c-a517-d3111bda6e13",
                            Email = "admin@ECCRM.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ECCRM.COM",
                            NormalizedUserName = "ADMIN@ECCRM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6wwuQf5408rNREihcY6VbVkK29LV9YzMUeJvOAA1H0UPAKdQVuKjlh3H/9x4p3aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49ca76ad-5946-481c-8b8d-8ab2fc12c53b",
                            TwoFactorEnabled = false,
                            UserName = "admin@ECCRM.com"
                        },
                        new
                        {
                            Id = "10845a45-a4a4-4307-9ea3-beaa5a7fe63f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43ba4e1c-6857-4fc9-afbb-5d6a2b3dfee4",
                            Email = "manager@ECCRM.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@ECCRM.COM",
                            NormalizedUserName = "MANAGER@ECCRM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECo95FKQDe+1PWV2JT2ugaD7D0TH4D7mvzrVfaTpdsnhSb4xsMATr0hbmZIl8DCKsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f731b1c-e2f6-4a30-a495-7e6da12078ec",
                            TwoFactorEnabled = false,
                            UserName = "manager@ECCRM.com"
                        },
                        new
                        {
                            Id = "8cb3d8cc-ade5-4af4-9f2d-72c2b8925697",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84787860-5d22-41c2-8474-a250d2083773",
                            Email = "Petr_Reshetnikov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETR_RESHETNIKOV@GMAIL.COM",
                            NormalizedUserName = "PETR_RESHETNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVltEUdZx7bh5doFIqfybrrVJBy9TQLI/rbMkFcdX1KnjLdyGDoIwY+rHcPDvuVCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df1fdd14-9a55-4779-85e8-032a4cf87bcb",
                            TwoFactorEnabled = false,
                            UserName = "Petr_Reshetnikov@gmail.com"
                        },
                        new
                        {
                            Id = "db6d59cc-d370-4530-bff6-e444b61767a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e50b023f-190e-4fde-ba64-19ccf6239d6e",
                            Email = "Mikhail_Andreev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKHAIL_ANDREEV@GMAIL.COM",
                            NormalizedUserName = "MIKHAIL_ANDREEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDrjpdkVkveuTjjdXJ43LqBY4gBxwZGY7cNp7Gn72gE5QEV/lCQagQvN7gVKqVGB5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9b28adf-e0ce-4fba-be58-1c3913c2b2c7",
                            TwoFactorEnabled = false,
                            UserName = "Mikhail_Andreev@gmail.com"
                        },
                        new
                        {
                            Id = "739efcff-1543-4115-bd6c-d3c73f4d9ba6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db46b590-74ea-498a-9756-252d7c6fa3a7",
                            Email = "Natalia_Usovich@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NATALIA_USOVICH@GMAIL.COM",
                            NormalizedUserName = "NATALIA_USOVICH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKgPljb0mt0YH3uczmsR2/7KeQi/BwiJgYJLCCKENr2boo5IBojdBtmZV/cXX6lhXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b83675ac-1627-4d43-abaa-3c3804056aed",
                            TwoFactorEnabled = false,
                            UserName = "Natalia_Usovich@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Course", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.StudentGroup", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Mark", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Lesson", "Lesson")
                        .WithMany("Marks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.BLL.Models.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.StudentGroup", "StudentGroup")
                        .WithMany("Students")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.BLL.Models.Teacher", "Teacher")
                        .WithMany("StudentGroups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Topic", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId1");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Teacher", b =>
                {
                    b.Navigation("StudentGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
