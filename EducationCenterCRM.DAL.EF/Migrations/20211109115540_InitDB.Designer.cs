// <auto-generated />
using System;
using EducationCenterCRM.DAL.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationCenterCRM.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211109115540_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("293e277c-a80c-4a2a-a914-2c20512c7e36"),
                            Description = "Introduction to C#",
                            DurationWeeks = 12,
                            Price = 1250m,
                            Program = "1. Getting Started",
                            Title = "Introduction to C#",
                            TopicId = new Guid("f787ae41-b99f-4edd-a8d1-2c6d8b92a017")
                        },
                        new
                        {
                            Id = new Guid("cfa59c8f-6f74-4da4-a048-5beae3b4325c"),
                            Description = "Introduction to Java",
                            DurationWeeks = 4,
                            Price = 1550m,
                            Program = "1. Getting Started",
                            Title = "Introduction to Web",
                            TopicId = new Guid("1e74e8c5-f5cd-434e-9759-49516313940b")
                        },
                        new
                        {
                            Id = new Guid("ba292f90-d522-4351-adc6-4462a0a59e03"),
                            Description = "Web with ASP.NET",
                            DurationWeeks = 16,
                            Price = 1350m,
                            Program = "1. Controllers and MVC 2. WebAPI 3.Angular",
                            Title = "ASP.NET",
                            TopicId = new Guid("f787ae41-b99f-4edd-a8d1-2c6d8b92a017")
                        },
                        new
                        {
                            Id = new Guid("45062d07-2863-4902-90ae-642c5f769132"),
                            Description = "Unity Game Development",
                            DurationWeeks = 16,
                            Price = 1850m,
                            Program = "1. What is Unity",
                            Title = "Unity",
                            TopicId = new Guid("f787ae41-b99f-4edd-a8d1-2c6d8b92a017")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9d0f550-6112-49d4-a38d-31a5e09e7c8d"),
                            GroupId = new Guid("25d71009-5d5b-43cc-9865-36d97598e8c0"),
                            LessonDate = new DateTime(2021, 11, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("34af2139-a78e-4930-916d-7c85063123f9"),
                            GroupId = new Guid("25d71009-5d5b-43cc-9865-36d97598e8c0"),
                            LessonDate = new DateTime(2021, 11, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("59a3c781-79f5-4e77-baf3-57987763488d"),
                            GroupId = new Guid("25d71009-5d5b-43cc-9865-36d97598e8c0"),
                            LessonDate = new DateTime(2021, 11, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97a55ecf-db5e-4d43-abc7-aca9a8d2186c"),
                            LessonId = new Guid("b9d0f550-6112-49d4-a38d-31a5e09e7c8d"),
                            Score = 8,
                            StudentId = new Guid("b445b323-84bb-4f34-8484-49a4ff303665")
                        },
                        new
                        {
                            Id = new Guid("8aed2be8-d7dc-4091-b079-b87f6042c529"),
                            LessonId = new Guid("b9d0f550-6112-49d4-a38d-31a5e09e7c8d"),
                            Score = 7,
                            StudentId = new Guid("e07043a9-b35f-460a-9324-f80c67867b60")
                        },
                        new
                        {
                            Id = new Guid("f068c6a0-11a3-45bc-b5bc-4d6f2d6890f7"),
                            LessonId = new Guid("34af2139-a78e-4930-916d-7c85063123f9"),
                            Score = 9,
                            StudentId = new Guid("b445b323-84bb-4f34-8484-49a4ff303665")
                        },
                        new
                        {
                            Id = new Guid("8e3155f8-0237-4c7d-90d4-8fe6756304ff"),
                            LessonId = new Guid("34af2139-a78e-4930-916d-7c85063123f9"),
                            Score = 7,
                            StudentId = new Guid("e07043a9-b35f-460a-9324-f80c67867b60")
                        },
                        new
                        {
                            Id = new Guid("cacaf4bb-c917-4e2a-ad5a-631e8f79915e"),
                            LessonId = new Guid("59a3c781-79f5-4e77-baf3-57987763488d"),
                            Score = 7,
                            StudentId = new Guid("e07043a9-b35f-460a-9324-f80c67867b60")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b445b323-84bb-4f34-8484-49a4ff303665"),
                            BirthDate = new DateTime(1999, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vasilii_Petrov@gmail.com",
                            FirstName = "Vasilii",
                            Gender = 0,
                            LastName = "Petrov",
                            Phone = "+375(25)4773941",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("25d71009-5d5b-43cc-9865-36d97598e8c0")
                        },
                        new
                        {
                            Id = new Guid("e07043a9-b35f-460a-9324-f80c67867b60"),
                            BirthDate = new DateTime(1998, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Petr_Vasiliev@gmail.com",
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Vasiliev",
                            Phone = "+375(25)5377414",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("25d71009-5d5b-43cc-9865-36d97598e8c0")
                        },
                        new
                        {
                            Id = new Guid("8e2ac9c1-9b8d-4d8b-bb38-d6a806828f51"),
                            BirthDate = new DateTime(1989, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ivan_Bezfamilnyi@gmail.com",
                            FirstName = "Ivan",
                            Gender = 0,
                            LastName = "Bezfamilnyi",
                            Phone = "+375(44)6121978",
                            StartDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("7f74facb-b927-4b9b-8c0d-4f3945bbb73a")
                        },
                        new
                        {
                            Id = new Guid("8249a6ff-a322-46e5-a0de-de2fbc810eb2"),
                            BirthDate = new DateTime(1989, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mariya_Sidorova@gmail.com",
                            FirstName = "Mariya",
                            Gender = 1,
                            LastName = "Sidorova",
                            Phone = "+375(25)6650766",
                            StartDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("7f74facb-b927-4b9b-8c0d-4f3945bbb73a")
                        },
                        new
                        {
                            Id = new Guid("bd081eb2-7237-4479-830f-197ef4c210e0"),
                            BirthDate = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vitali_Lukyanov@gmail.com",
                            FirstName = "Vitali",
                            Gender = 0,
                            LastName = "Lukyanov",
                            Phone = "+375(33)6888895",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("e33436dd-9172-47de-a61a-a583d9347ead")
                        },
                        new
                        {
                            Id = new Guid("157ff56f-4a2a-4fd2-8747-08502d6890d5"),
                            BirthDate = new DateTime(1995, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Elvira_Zaytseva@gmail.com",
                            FirstName = "Elvira",
                            Gender = 0,
                            LastName = "Zaytseva",
                            Phone = "+375(25)7429121",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("e33436dd-9172-47de-a61a-a583d9347ead")
                        },
                        new
                        {
                            Id = new Guid("8a68bd7f-6f8b-4a14-bd0f-9c79cceeb3f8"),
                            BirthDate = new DateTime(1991, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Alexander_Ptichkin@gmail.com",
                            FirstName = "Alexander",
                            Gender = 0,
                            LastName = "Ptichkin",
                            Phone = "+375(44)3077104",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("e33436dd-9172-47de-a61a-a583d9347ead")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25d71009-5d5b-43cc-9865-36d97598e8c0"),
                            CourseId = new Guid("ba292f90-d522-4351-adc6-4462a0a59e03"),
                            Status = 0,
                            TeacherId = new Guid("fa33d33a-988c-43d3-b52a-f3fc81a5c113"),
                            Title = "ASP_21-1"
                        },
                        new
                        {
                            Id = new Guid("7f74facb-b927-4b9b-8c0d-4f3945bbb73a"),
                            CourseId = new Guid("ba292f90-d522-4351-adc6-4462a0a59e03"),
                            Status = 0,
                            TeacherId = new Guid("ffb1dc1e-6079-4612-aae8-19a4957500ba"),
                            Title = "ASP_21-2"
                        },
                        new
                        {
                            Id = new Guid("e33436dd-9172-47de-a61a-a583d9347ead"),
                            CourseId = new Guid("cfa59c8f-6f74-4da4-a048-5beae3b4325c"),
                            Status = 0,
                            TeacherId = new Guid("598d8780-c72e-4824-b5f1-72f48ac19a15"),
                            Title = "JS_21-1"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentRequests");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa33d33a-988c-43d3-b52a-f3fc81a5c113"),
                            Bio = "Some information",
                            BirthDate = new DateTime(1986, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Petr_Reshetnikov@gmail.com",
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Reshetnikov",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(33)2301695"
                        },
                        new
                        {
                            Id = new Guid("ffb1dc1e-6079-4612-aae8-19a4957500ba"),
                            Bio = "Some other information",
                            BirthDate = new DateTime(1989, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mikhail_Andreev@gmail.com",
                            FirstName = "Mikhail",
                            Gender = 0,
                            LastName = "Andreev",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(25)9557996"
                        },
                        new
                        {
                            Id = new Guid("598d8780-c72e-4824-b5f1-72f48ac19a15"),
                            Bio = "Some other information",
                            BirthDate = new DateTime(1989, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Natalia_Usovich@gmail.com",
                            FirstName = "Natalia",
                            Gender = 1,
                            LastName = "Usovich",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(25)7021899"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId1");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f787ae41-b99f-4edd-a8d1-2c6d8b92a017"),
                            Description = ".Net (ASP.NET, Unity)",
                            Title = ".Net"
                        },
                        new
                        {
                            Id = new Guid("1e74e8c5-f5cd-434e-9759-49516313940b"),
                            Description = "JS, HTML, CSS",
                            Title = "Frontend"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "7449f1f9-32b5-40cf-81d0-a26d5595783d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9860e44e-9186-4b06-8234-7e3d08d147e1",
                            Email = "admin@ECCRM.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ECCRM.COM",
                            NormalizedUserName = "ADMIN@ECCRM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFAzl26kpuoUpMGi8XUwvYkGQqkMHOL1DOJJ4elManPP1nu4cwjWxm/0Uy9O86wzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43a44b01-a3c6-4382-8c24-399e4b2cd905",
                            TwoFactorEnabled = false,
                            UserName = "admin@ECCRM.com"
                        },
                        new
                        {
                            Id = "dfecda69-283f-4aa3-b83e-39eb093c2eca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b9b23a0-20d9-4dd7-984b-32416e5a832e",
                            Email = "manager@ECCRM.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@ECCRM.COM",
                            NormalizedUserName = "MANAGER@ECCRM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHMykHKMeCSJRv5auO0zELBMRgJ9Emndl+UY8HPnfiJWj0El41txw7/vG/2ofpInSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21bea852-1eee-4274-bee0-859c77814599",
                            TwoFactorEnabled = false,
                            UserName = "manager@ECCRM.com"
                        },
                        new
                        {
                            Id = "038e759e-98fe-495a-882b-b99250502e45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "372527fb-7b00-4ee0-9771-ab68354ee315",
                            Email = "Petr_Reshetnikov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETR_RESHETNIKOV@GMAIL.COM",
                            NormalizedUserName = "PETR_RESHETNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELrHs4ZJOvwffissgCVYRuW1zrD8tGqrzsVcZ5E+29x7AApGkiAaabn8JhLK/J1TKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9260080-b94d-4459-b8d0-de3c171110bb",
                            TwoFactorEnabled = false,
                            UserName = "Petr_Reshetnikov@gmail.com"
                        },
                        new
                        {
                            Id = "cb6daeb6-f0b1-4e0a-bd1d-5bdac1bc0c17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e832a5d-d561-49f8-8152-f3c8e95fc1a7",
                            Email = "Mikhail_Andreev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKHAIL_ANDREEV@GMAIL.COM",
                            NormalizedUserName = "MIKHAIL_ANDREEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA+8u2361ZAlZ6avlENmvpIDELKrPmbX7rWs7karVLzqVpRV+HqYuSo2ew6FURXZFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41e3c1a3-63f8-4739-b65d-d0cbcf73d926",
                            TwoFactorEnabled = false,
                            UserName = "Mikhail_Andreev@gmail.com"
                        },
                        new
                        {
                            Id = "cc4b4eac-6727-4c1c-ba35-39dc583d2dc0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8668fb62-7a8b-4904-81e9-2fa3f131ba30",
                            Email = "Natalia_Usovich@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NATALIA_USOVICH@GMAIL.COM",
                            NormalizedUserName = "NATALIA_USOVICH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJfHwWgeDr+BPKAJciDgladG2YBUWPErR898JkJ8gG33Do4UETzIFKDmL+ViFhSGjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddde09c5-8c90-47aa-9973-effb6f9ee4c3",
                            TwoFactorEnabled = false,
                            UserName = "Natalia_Usovich@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Course", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.StudentGroup", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Mark", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Lesson", "Lesson")
                        .WithMany("Marks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.BLL.Models.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.StudentGroup", "StudentGroup")
                        .WithMany("Students")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.BLL.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Topic", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId1");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
