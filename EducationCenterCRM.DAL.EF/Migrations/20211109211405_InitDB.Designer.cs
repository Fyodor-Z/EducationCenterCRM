// <auto-generated />
using System;
using EducationCenterCRM.DAL.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationCenterCRM.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211109211405_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98afda61-3a49-455b-bc79-fe35e2ebaeb4"),
                            Description = "Introduction to C#",
                            DurationWeeks = 12,
                            Price = 1250m,
                            Program = "1. Getting Started",
                            Title = "Introduction to C#",
                            TopicId = new Guid("93a67efc-57d9-4b03-afe4-90bc565855d7")
                        },
                        new
                        {
                            Id = new Guid("c70c78fc-920b-477e-a9fa-2f4e345fc608"),
                            Description = "Introduction to Java",
                            DurationWeeks = 4,
                            Price = 1550m,
                            Program = "1. Getting Started",
                            Title = "Introduction to Web",
                            TopicId = new Guid("3c38486f-d0ad-49e0-b05a-76009bf34887")
                        },
                        new
                        {
                            Id = new Guid("e6431dc5-a244-4448-8acb-a2a250e11261"),
                            Description = "Web with ASP.NET",
                            DurationWeeks = 16,
                            Price = 1350m,
                            Program = "1. Controllers and MVC 2. WebAPI 3.Angular",
                            Title = "ASP.NET",
                            TopicId = new Guid("93a67efc-57d9-4b03-afe4-90bc565855d7")
                        },
                        new
                        {
                            Id = new Guid("b39bcabe-0fe3-44c7-a155-f8bc21b2529e"),
                            Description = "Unity Game Development",
                            DurationWeeks = 16,
                            Price = 1850m,
                            Program = "1. What is Unity",
                            Title = "Unity",
                            TopicId = new Guid("93a67efc-57d9-4b03-afe4-90bc565855d7")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30837595-d4a1-479e-bd15-1a88b157b5ce"),
                            GroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            LessonDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("74efe79a-24b7-449a-82ea-6b8b618e9266"),
                            GroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            LessonDate = new DateTime(2021, 11, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("4ef6e1df-0383-4f4b-b512-5597a27e0a69"),
                            GroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            LessonDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("999c08ce-1655-43bf-aeb0-10808116d8a5"),
                            GroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            LessonDate = new DateTime(2021, 11, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("3759d52d-d0b3-4cf1-8c25-1259ef3df347"),
                            GroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            LessonDate = new DateTime(2021, 11, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("c2ab0849-f535-4ffe-b748-f3773f030da3"),
                            GroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            LessonDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("60bcf8ab-798e-428d-b334-d54d3d272732"),
                            GroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            LessonDate = new DateTime(2021, 10, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8069bfdb-0307-4e6e-99ac-d5aa8a40703d"),
                            LessonId = new Guid("30837595-d4a1-479e-bd15-1a88b157b5ce"),
                            Score = 8,
                            StudentId = new Guid("6b082e66-423e-40a0-b8a2-0d85090c7d5e")
                        },
                        new
                        {
                            Id = new Guid("c52dff00-332d-4ecb-9d59-2f634e048122"),
                            LessonId = new Guid("30837595-d4a1-479e-bd15-1a88b157b5ce"),
                            Score = 7,
                            StudentId = new Guid("1eb80e92-43bd-4d6f-9cf9-348f35edf2f9")
                        },
                        new
                        {
                            Id = new Guid("493c712c-92f1-470e-a1d8-191416d82e7d"),
                            LessonId = new Guid("74efe79a-24b7-449a-82ea-6b8b618e9266"),
                            Score = 9,
                            StudentId = new Guid("6b082e66-423e-40a0-b8a2-0d85090c7d5e")
                        },
                        new
                        {
                            Id = new Guid("a19a3ba6-5365-4527-8dae-e727c5e7ccd1"),
                            LessonId = new Guid("74efe79a-24b7-449a-82ea-6b8b618e9266"),
                            Score = 7,
                            StudentId = new Guid("1eb80e92-43bd-4d6f-9cf9-348f35edf2f9")
                        },
                        new
                        {
                            Id = new Guid("32ac8deb-220d-4627-b011-76402b6c41d1"),
                            LessonId = new Guid("4ef6e1df-0383-4f4b-b512-5597a27e0a69"),
                            Score = 7,
                            StudentId = new Guid("1eb80e92-43bd-4d6f-9cf9-348f35edf2f9")
                        },
                        new
                        {
                            Id = new Guid("75f12393-021c-409d-969b-6257d51156db"),
                            LessonId = new Guid("999c08ce-1655-43bf-aeb0-10808116d8a5"),
                            Score = 7,
                            StudentId = new Guid("6b082e66-423e-40a0-b8a2-0d85090c7d5e")
                        },
                        new
                        {
                            Id = new Guid("70350fc4-00d6-46d0-ab85-54f5494fa072"),
                            LessonId = new Guid("999c08ce-1655-43bf-aeb0-10808116d8a5"),
                            Score = 9,
                            StudentId = new Guid("1eb80e92-43bd-4d6f-9cf9-348f35edf2f9")
                        },
                        new
                        {
                            Id = new Guid("38b06494-dcdd-4a87-b405-aaf8ddba40a9"),
                            LessonId = new Guid("999c08ce-1655-43bf-aeb0-10808116d8a5"),
                            Score = 7,
                            StudentId = new Guid("568853e7-776b-4085-822e-63c81e23a7b8")
                        },
                        new
                        {
                            Id = new Guid("0758f9da-c83e-4301-97c1-8845ab99cd53"),
                            LessonId = new Guid("999c08ce-1655-43bf-aeb0-10808116d8a5"),
                            Score = 8,
                            StudentId = new Guid("1bc81871-5e3c-4a3d-aa14-ade661501192")
                        },
                        new
                        {
                            Id = new Guid("deb58c6e-5c40-46bc-b424-7fb5947ee5b1"),
                            LessonId = new Guid("3759d52d-d0b3-4cf1-8c25-1259ef3df347"),
                            Score = 8,
                            StudentId = new Guid("6b082e66-423e-40a0-b8a2-0d85090c7d5e")
                        },
                        new
                        {
                            Id = new Guid("ddfdf862-fc84-4855-9c62-c5b8e8c59a94"),
                            LessonId = new Guid("3759d52d-d0b3-4cf1-8c25-1259ef3df347"),
                            Score = 9,
                            StudentId = new Guid("1eb80e92-43bd-4d6f-9cf9-348f35edf2f9")
                        },
                        new
                        {
                            Id = new Guid("d0dd610e-6768-4229-9fb3-4d2fbba62d1b"),
                            LessonId = new Guid("3759d52d-d0b3-4cf1-8c25-1259ef3df347"),
                            Score = 8,
                            StudentId = new Guid("568853e7-776b-4085-822e-63c81e23a7b8")
                        },
                        new
                        {
                            Id = new Guid("d488928b-d149-4584-a376-c3dd9e619f4a"),
                            LessonId = new Guid("3759d52d-d0b3-4cf1-8c25-1259ef3df347"),
                            Score = 7,
                            StudentId = new Guid("1bc81871-5e3c-4a3d-aa14-ade661501192")
                        },
                        new
                        {
                            Id = new Guid("5ce7e820-4fb7-4aca-832e-151dea2a2c06"),
                            LessonId = new Guid("c2ab0849-f535-4ffe-b748-f3773f030da3"),
                            Score = 8,
                            StudentId = new Guid("6b082e66-423e-40a0-b8a2-0d85090c7d5e")
                        },
                        new
                        {
                            Id = new Guid("6021e139-8369-4369-a247-4fae61a47bc7"),
                            LessonId = new Guid("c2ab0849-f535-4ffe-b748-f3773f030da3"),
                            Score = 8,
                            StudentId = new Guid("1eb80e92-43bd-4d6f-9cf9-348f35edf2f9")
                        },
                        new
                        {
                            Id = new Guid("15375d24-a8bd-43b7-b703-74f44af5afa6"),
                            LessonId = new Guid("c2ab0849-f535-4ffe-b748-f3773f030da3"),
                            Score = 8,
                            StudentId = new Guid("568853e7-776b-4085-822e-63c81e23a7b8")
                        },
                        new
                        {
                            Id = new Guid("651cc5a9-b1e2-4da5-8e1a-287251417d08"),
                            LessonId = new Guid("c2ab0849-f535-4ffe-b748-f3773f030da3"),
                            Score = 6,
                            StudentId = new Guid("1bc81871-5e3c-4a3d-aa14-ade661501192")
                        },
                        new
                        {
                            Id = new Guid("a1ce7ab3-efa4-4379-99d6-0398243a26fa"),
                            LessonId = new Guid("60bcf8ab-798e-428d-b334-d54d3d272732"),
                            Score = 8,
                            StudentId = new Guid("6b082e66-423e-40a0-b8a2-0d85090c7d5e")
                        },
                        new
                        {
                            Id = new Guid("1f62358e-0ada-486e-ac36-b39250882b5a"),
                            LessonId = new Guid("c2ab0849-f535-4ffe-b748-f3773f030da3"),
                            Score = 8,
                            StudentId = new Guid("568853e7-776b-4085-822e-63c81e23a7b8")
                        },
                        new
                        {
                            Id = new Guid("59d111fa-1399-4a57-9477-39023cb25443"),
                            LessonId = new Guid("c2ab0849-f535-4ffe-b748-f3773f030da3"),
                            Score = 6,
                            StudentId = new Guid("1bc81871-5e3c-4a3d-aa14-ade661501192")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b082e66-423e-40a0-b8a2-0d85090c7d5e"),
                            BirthDate = new DateTime(1999, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vasilii_Petrov@gmail.com",
                            FirstName = "Vasilii",
                            Gender = 0,
                            LastName = "Petrov",
                            Phone = "+375(29)7126923",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304")
                        },
                        new
                        {
                            Id = new Guid("1eb80e92-43bd-4d6f-9cf9-348f35edf2f9"),
                            BirthDate = new DateTime(1998, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Petr_Vasiliev@gmail.com",
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Vasiliev",
                            Phone = "+375(29)3058717",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304")
                        },
                        new
                        {
                            Id = new Guid("e995407a-f3ba-4afa-b63a-d1569f1fb60a"),
                            BirthDate = new DateTime(1989, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ivan_Bezfamilnyi@gmail.com",
                            FirstName = "Ivan",
                            Gender = 0,
                            LastName = "Bezfamilnyi",
                            Phone = "+375(44)8364181",
                            StartDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("379b6f52-6e23-48ed-9e32-537bd6111a46")
                        },
                        new
                        {
                            Id = new Guid("6b1c62ed-6a12-4785-a661-c50a12264cad"),
                            BirthDate = new DateTime(1989, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mariya_Sidorova@gmail.com",
                            FirstName = "Mariya",
                            Gender = 1,
                            LastName = "Sidorova",
                            Phone = "+375(33)8536822",
                            StartDate = new DateTime(2021, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("379b6f52-6e23-48ed-9e32-537bd6111a46")
                        },
                        new
                        {
                            Id = new Guid("09a5b5df-4b1f-4c25-bcc5-c23fcdb9b7ad"),
                            BirthDate = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vitali_Lukyanov@gmail.com",
                            FirstName = "Vitali",
                            Gender = 0,
                            LastName = "Lukyanov",
                            Phone = "+375(33)7813468",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("4683265e-ab69-4fa3-848a-46c12bd42815")
                        },
                        new
                        {
                            Id = new Guid("c3a4277b-9e38-4589-8813-5b66b0f42a45"),
                            BirthDate = new DateTime(1995, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Elvira_Zaytseva@gmail.com",
                            FirstName = "Elvira",
                            Gender = 0,
                            LastName = "Zaytseva",
                            Phone = "+375(33)6121372",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("4683265e-ab69-4fa3-848a-46c12bd42815")
                        },
                        new
                        {
                            Id = new Guid("f7fd1bed-770e-4713-bff2-fd5b1b1bf18d"),
                            BirthDate = new DateTime(1991, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Alexander_Ptichkin@gmail.com",
                            FirstName = "Alexander",
                            Gender = 0,
                            LastName = "Ptichkin",
                            Phone = "+375(29)7532946",
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("4683265e-ab69-4fa3-848a-46c12bd42815")
                        },
                        new
                        {
                            Id = new Guid("568853e7-776b-4085-822e-63c81e23a7b8"),
                            BirthDate = new DateTime(1998, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Anton_Yermolaichik@gmail.com",
                            FirstName = "Anton",
                            Gender = 0,
                            LastName = "Yermolaichik",
                            Phone = "+375(25)4381032",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304")
                        },
                        new
                        {
                            Id = new Guid("1bc81871-5e3c-4a3d-aa14-ade661501192"),
                            BirthDate = new DateTime(1998, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Alexnader_Filipovets@gmail.com",
                            FirstName = "Alexnader",
                            Gender = 0,
                            LastName = "Filipovets",
                            Phone = "+375(33)1547098",
                            StartDate = new DateTime(2021, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentGroupId = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304")
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ce9b298-caca-4a0c-b469-74e0b22e7304"),
                            CourseId = new Guid("e6431dc5-a244-4448-8acb-a2a250e11261"),
                            Status = 0,
                            TeacherId = new Guid("fa4c1873-7e58-4f1c-a37c-acc36a6b9773"),
                            Title = "ASP_21-1"
                        },
                        new
                        {
                            Id = new Guid("379b6f52-6e23-48ed-9e32-537bd6111a46"),
                            CourseId = new Guid("e6431dc5-a244-4448-8acb-a2a250e11261"),
                            Status = 0,
                            TeacherId = new Guid("8a13e31b-c9a1-4c45-b9ef-4518e956bee9"),
                            Title = "ASP_21-2"
                        },
                        new
                        {
                            Id = new Guid("4683265e-ab69-4fa3-848a-46c12bd42815"),
                            CourseId = new Guid("c70c78fc-920b-477e-a9fa-2f4e345fc608"),
                            Status = 0,
                            TeacherId = new Guid("3024d86b-a6b4-4b0b-aac7-803e4a13354f"),
                            Title = "JS_21-1"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentRequests");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa4c1873-7e58-4f1c-a37c-acc36a6b9773"),
                            Bio = "Some information",
                            BirthDate = new DateTime(1986, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Petr_Reshetnikov@gmail.com",
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Reshetnikov",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(25)4788854"
                        },
                        new
                        {
                            Id = new Guid("8a13e31b-c9a1-4c45-b9ef-4518e956bee9"),
                            Bio = "Some other information",
                            BirthDate = new DateTime(1989, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mikhail_Andreev@gmail.com",
                            FirstName = "Mikhail",
                            Gender = 0,
                            LastName = "Andreev",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(44)9181215"
                        },
                        new
                        {
                            Id = new Guid("3024d86b-a6b4-4b0b-aac7-803e4a13354f"),
                            Bio = "Some other information",
                            BirthDate = new DateTime(1989, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Natalia_Usovich@gmail.com",
                            FirstName = "Natalia",
                            Gender = 1,
                            LastName = "Usovich",
                            LinkToProfile = "https://www.linkedin.com/feed/",
                            Phone = "+375(25)3685395"
                        });
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId1");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93a67efc-57d9-4b03-afe4-90bc565855d7"),
                            Description = ".Net (ASP.NET, Unity)",
                            Title = ".Net"
                        },
                        new
                        {
                            Id = new Guid("3c38486f-d0ad-49e0-b05a-76009bf34887"),
                            Description = "JS, HTML, CSS",
                            Title = "Frontend"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1de47a43-055c-49d1-89de-f302008be610",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d74cc49-0dd8-4462-849a-3ac014c726d2",
                            Email = "admin@ECCRM.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ECCRM.COM",
                            NormalizedUserName = "ADMIN@ECCRM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGLZ9A5ayRoo0XAGzO1SdUVcIyVx8bS5I5t0NjRuGodwIyWlY4F3K1woIyL5xXsxlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9436fac-33d1-4c2e-b5dd-d7fa9e9d9525",
                            TwoFactorEnabled = false,
                            UserName = "admin@ECCRM.com"
                        },
                        new
                        {
                            Id = "0b733177-1a2e-4cbe-b4c9-bd652ff5824c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "915b842e-b02f-4302-ab0f-e163bf08700a",
                            Email = "manager@ECCRM.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@ECCRM.COM",
                            NormalizedUserName = "MANAGER@ECCRM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMS5Ikbu3ftrXaaNGIyZfE+YeqpTV/aBsutqv+4KY1x0gBL+XyCXc+sVPaYPzhxYFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "867b1e0d-760f-4b48-adb5-4a6edc724fea",
                            TwoFactorEnabled = false,
                            UserName = "manager@ECCRM.com"
                        },
                        new
                        {
                            Id = "b2331cbd-9caa-46b8-99b0-93e3c6546f48",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d0c271f-b159-4595-af26-cb6b47b0ef63",
                            Email = "Petr_Reshetnikov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETR_RESHETNIKOV@GMAIL.COM",
                            NormalizedUserName = "PETR_RESHETNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB7mP+PIycj0orHCWBFsO27OQ9TmNSZ9/ewlN4/LJfIn9goiuwp40IX4tLo1fmVRpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "806f6ac2-a7d8-4847-88fa-eee5d76cb3c8",
                            TwoFactorEnabled = false,
                            UserName = "Petr_Reshetnikov@gmail.com"
                        },
                        new
                        {
                            Id = "4ae2d1a7-f4d5-4935-a44e-04a3a9625c46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8cdfc56-803d-43aa-a015-456770ec568e",
                            Email = "Mikhail_Andreev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKHAIL_ANDREEV@GMAIL.COM",
                            NormalizedUserName = "MIKHAIL_ANDREEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOynCc6+0E0ODHohwkWe2El9VP68+ElA0LTL3J8Bt4zkUNiycRpG8plXiGCjQanFzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd376cb2-bef2-43f7-9dfd-3060045c4539",
                            TwoFactorEnabled = false,
                            UserName = "Mikhail_Andreev@gmail.com"
                        },
                        new
                        {
                            Id = "95057a4c-ba0f-4e5a-89fb-4495ff026d56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5976b9aa-45ce-4c42-85fb-aebf4ff31cde",
                            Email = "Natalia_Usovich@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NATALIA_USOVICH@GMAIL.COM",
                            NormalizedUserName = "NATALIA_USOVICH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENAQ4hscPMDjMT7+XG4QrX3DoekDHIrKqdcxye4yeW6oICOvWTGiGjs5stUMADYVFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6a286ab-a2f5-4438-9a31-e491258eec9c",
                            TwoFactorEnabled = false,
                            UserName = "Natalia_Usovich@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Course", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.StudentGroup", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Mark", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Lesson", "Lesson")
                        .WithMany("Marks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.BLL.Models.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.StudentGroup", "StudentGroup")
                        .WithMany("Students")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationCenterCRM.BLL.Models.Teacher", "Teacher")
                        .WithMany("StudentGroups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentRequest", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Topic", b =>
                {
                    b.HasOne("EducationCenterCRM.BLL.Models.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId1");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Lesson", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Student", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.StudentGroup", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EducationCenterCRM.BLL.Models.Teacher", b =>
                {
                    b.Navigation("StudentGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
